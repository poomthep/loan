-- [SCHEMA] สร้างตารางที่จำเป็น

CREATE TABLE public.profiles (
  id uuid NOT NULL PRIMARY KEY REFERENCES auth.users(id) ON DELETE CASCADE,
  email text,
  role text DEFAULT 'user',
  status text DEFAULT 'pending', -- e.g., pending, approved, rejected
  created_at timestamptz DEFAULT now(),
  updated_at timestamptz DEFAULT now()
);

CREATE TABLE public.banks (
  id bigint GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
  name text NOT NULL,
  logo_url text,
  created_at timestamptz DEFAULT now()
);

CREATE TABLE public.promotions (
  id bigint GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
  bank_id bigint REFERENCES public.banks(id),
  promotion_name text NOT NULL,
  loan_type text, -- ทั่วไป/สวัสดิการ/รีไฟแนนซ์/โครงการพิเศษ
  start_date date,
  end_date date,
  interest_rate_yr1 numeric,
  interest_rate_yr2 numeric,
  interest_rate_yr3 numeric,
  max_ltv smallint,
  dsr_limit smallint,
  income_per_million integer,
  min_living_expense integer,
  max_loan_tenure smallint,
  max_age_salaried smallint,
  max_age_business smallint,
  waive_mortgage_fee boolean DEFAULT false,
  has_mrta_option boolean DEFAULT false,
  interest_rate_yr1_mrta numeric,
  interest_rate_yr2_mrta numeric,
  interest_rate_yr3_mrta numeric,
  interest_rate_after_value_retail text,
  interest_rate_after_value_welfare text,
  interest_rate_after_value_mrta_retail text,
  interest_rate_after_value_mrta_welfare text,
  notes text,
  created_at timestamptz DEFAULT now()
);

-- [RLS] เปิดใช้งาน Row Level Security สำหรับแต่ละตาราง
ALTER TABLE public.profiles ENABLE ROW LEVEL SECURITY;
ALTER TABLE public.banks ENABLE ROW LEVEL SECURITY;
ALTER TABLE public.promotions ENABLE ROW LEVEL SECURITY;

-- [RLS Policies] กำหนดนโยบายการเข้าถึงข้อมูล

-- Policy 1: profiles
-- อนุญาตให้ผู้ใช้ที่ล็อกอินแล้ว (authenticated) สามารถอ่านข้อมูลโปรไฟล์ของตัวเองได้เท่านั้น
CREATE POLICY "read_own_profile"
ON public.profiles FOR SELECT
TO authenticated
USING (auth.uid() = id);

-- Policy 2: banks
-- อนุญาตให้ผู้ใช้ที่ล็อกอินแล้วทุกคนอ่านข้อมูลธนาคารได้
CREATE POLICY "read_all_banks"
ON public.banks FOR SELECT
TO authenticated
USING (true);

-- อนุญาตให้เฉพาะผู้ใช้ที่มี role เป็น 'admin' เท่านั้นที่สามารถ เพิ่ม/แก้ไข/ลบ ข้อมูลธนาคารได้
-- โดยดึง role มาจากตาราง profiles
CREATE POLICY "admin_manage_banks"
ON public.banks FOR ALL -- ALL = INSERT, UPDATE, DELETE
TO authenticated
USING ( (SELECT role FROM public.profiles WHERE id = auth.uid()) = 'admin' )
WITH CHECK ( (SELECT role FROM public.profiles WHERE id = auth.uid()) = 'admin' );

-- Policy 3: promotions
-- อนุญาตให้ผู้ใช้ที่ล็อกอินแล้วทุกคนอ่านข้อมูลโปรโมชันได้
CREATE POLICY "read_all_promotions"
ON public.promotions FOR SELECT
TO authenticated
USING (true);

-- อนุญาตให้เฉพาะผู้ใช้ที่มี role เป็น 'admin' เท่านั้นที่สามารถ เพิ่ม/แก้ไข/ลบ ข้อมูลโปรโมชันได้
CREATE POLICY "admin_manage_promotions"
ON public.promotions FOR ALL
TO authenticated
USING ( (SELECT role FROM public.profiles WHERE id = auth.uid()) = 'admin' )
WITH CHECK ( (SELECT role FROM public.profiles WHERE id = auth.uid()) = 'admin' );

-- หมายเหตุ: ฟังก์ชัน (SELECT role FROM public.profiles WHERE id = auth.uid())
-- สามารถสร้างเป็น security definer function เพื่อประสิทธิภาพที่ดีขึ้นในโปรเจ็กต์ขนาดใหญ่ได้