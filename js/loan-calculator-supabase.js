import {getBanks,getActivePromotions,saveCalculation}from './data-manager.js';export class LoanCalculator{async calculateMaxLoanAmount(p){const banks=await getBanks();const promos=await getActivePromotions(p.productType);const dsrLimit=.7;const maxMonthly=Math.max(0,(p.income+p.incomeExtra-p.debt)*dsrLimit);const rate=.055;const n=p.years*12;const maxLoan=maxMonthly>0?Math.round(maxMonthly*((1-Math.pow(1+rate/12,-n))/(rate/12))):0;const rows=banks.map(b=>({bankShortName:b.short_name||b.name,bankName:b.name,interestRate:rate*100,monthlyPayment:Math.round(maxMonthly),maxLoanAmount:maxLoan,dsr:((p.debt+maxMonthly)/Math.max(1,(p.income+p.incomeExtra)))*100,ltv:p.propertyValue?(maxLoan/p.propertyValue)*100:0,promotion:promos.find(pr=>pr.bank_id===b.id)||null,status:maxLoan>0?'APPROVED':'REJECTED'}));return rows.sort((a,b)=>(b.maxLoanAmount||0)-(a.maxLoanAmount||0))}async checkLoanAmount(p){const banks=await getBanks();const promos=await getActivePromotions(p.productType);const rate=.055;const n=p.years*12;const A=p.loanAmount>0?(p.loanAmount*(rate/12))/(1-Math.pow(1+rate/12,-n)):0;const dsr=((p.debt+A)/Math.max(1,(p.income+p.incomeExtra)))*100;const rows=banks.map(b=>({bankShortName:b.short_name||b.name,bankName:b.name,interestRate:rate*100,monthlyPayment:Math.round(A),loanAmount:p.loanAmount,dsr,ltv:p.propertyValue?(p.loanAmount/p.propertyValue)*100:0,promotion:promos.find(pr=>pr.bank_id===b.id)||null,status:(dsr<=70&&(!p.propertyValue||(p.loanAmount<=p.propertyValue*.9)))?'APPROVED':'REJECTED'}));return rows.sort((a,b)=>(a.dsr)-(b.dsr))}async saveCalculation(params,results,mode){await saveCalculation(params,results,mode)}static exportToCSV(rows){if(!rows||!rows.length)return'';const cols=Object.keys(rows[0]);const esc=s=>`"${String(s).replace(/"/g,'""')}"`;const lines=[cols.join(',')].concat(rows.map(r=>cols.map(c=>esc(r[c]??'')).join(',')));return lines.join('\n')}static exportToJSON(rows,params){return JSON.stringify({params,results:rows},null,2)}}