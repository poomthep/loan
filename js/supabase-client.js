// js/supabase-client.js
// ========================================
// SUPABASE CLIENT CONFIGURATION - UPDATED
// ========================================

// üîß ‡∏Å‡∏≥‡∏´‡∏ô‡∏î‡∏Ñ‡πà‡∏≤‡∏Å‡∏≤‡∏£‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠ Supabase
// ‚ö†Ô∏è ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡πÅ‡∏ó‡∏ô‡∏ó‡∏µ‡πà‡∏Ñ‡πà‡∏≤‡∏î‡πâ‡∏≤‡∏ô‡∏•‡πà‡∏≤‡∏á‡∏î‡πâ‡∏ß‡∏¢‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏à‡∏≤‡∏Å Supabase Dashboard ‡∏Ç‡∏≠‡∏á‡∏Ñ‡∏∏‡∏ì
const SUPABASE_CONFIG = {
  // üëâ ‡πÑ‡∏õ‡∏ó‡∏µ‡πà https://supabase.com/dashboard/project/[your-project]/settings/api
  url: 'https://kpsferwaplnkzrbqoghv.supabase.co', // Project URL
  anonKey: 'eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJzdXBhYmFzZSIsInJlZiI6Imtwc2ZlcndhcGxua3pyYnFvZ2h2Iiwicm9sZSI6ImFub24iLCJpYXQiOjE3NTU1MTI1NjUsImV4cCI6MjA3MTA4ODU2NX0.FizC7Ia92dqvbtfuU5T3hymh-UX6OEqQRvQnB0oY96Y', // anon/public key (‡∏¢‡∏≤‡∏ß‡∏°‡∏≤‡∏Å)
  
  // ‡∏Å‡∏≤‡∏£‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤‡πÄ‡∏û‡∏¥‡πà‡∏°‡πÄ‡∏ï‡∏¥‡∏°
  options: {
    auth: {
      autoRefreshToken: true,
      persistSession: true,
      detectSessionInUrl: false
    },
    realtime: {
      params: {
        eventsPerSecond: 10
      }
    }
  }
};

// üìã ‡∏ß‡∏¥‡∏ò‡∏µ‡∏Å‡∏≤‡∏£ Setup Supabase:
// 1. ‡πÑ‡∏õ‡∏ó‡∏µ‡πà https://supabase.com ‡πÅ‡∏•‡∏∞‡∏™‡∏£‡πâ‡∏≤‡∏á Project ‡πÉ‡∏´‡∏°‡πà
// 2. ‡∏£‡∏≠‡πÉ‡∏´‡πâ Database ‡∏™‡∏£‡πâ‡∏≤‡∏á‡πÄ‡∏™‡∏£‡πá‡∏à (‡∏õ‡∏£‡∏∞‡∏°‡∏≤‡∏ì 2-3 ‡∏ô‡∏≤‡∏ó‡∏µ)
// 3. ‡πÑ‡∏õ‡∏ó‡∏µ‡πà Settings > API ‡πÅ‡∏•‡∏∞‡∏Ñ‡∏±‡∏î‡∏•‡∏≠‡∏Å:
//    - Project URL (‡πÉ‡∏™‡πà‡πÉ‡∏ô‡∏ï‡∏±‡∏ß‡πÅ‡∏õ‡∏£ url)
//    - anon public key (‡πÉ‡∏™‡πà‡πÉ‡∏ô‡∏ï‡∏±‡∏ß‡πÅ‡∏õ‡∏£ anonKey)
// 4. ‡πÑ‡∏õ‡∏ó‡∏µ‡πà SQL Editor ‡πÅ‡∏•‡∏∞‡∏£‡∏±‡∏ô SQL ‡∏à‡∏≤‡∏Å‡πÑ‡∏ü‡∏•‡πå supabase_setup_sql
// 5. ‡πÅ‡∏ó‡∏ô‡∏ó‡∏µ‡πà‡∏Ñ‡πà‡∏≤‡πÉ‡∏ô‡πÑ‡∏ü‡∏•‡πå‡∏ô‡∏µ‡πâ‡πÅ‡∏•‡∏∞‡πÄ‡∏£‡∏¥‡πà‡∏°‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô

// ‡∏™‡∏£‡πâ‡∏≤‡∏á Supabase client instance
let supabase;

try {
  if (typeof window !== 'undefined' && window.supabase) {
    // ‡πÉ‡∏ä‡πâ supabase ‡∏à‡∏≤‡∏Å CDN
    supabase = window.supabase.createClient(
      SUPABASE_CONFIG.url,
      SUPABASE_CONFIG.anonKey,
      SUPABASE_CONFIG.options
    );
    
    console.log('‚úÖ Supabase client initialized');
  } else {
    console.error('‚ùå Supabase library not loaded. Please include it in your HTML:');
    console.error('<script src="https://cdn.jsdelivr.net/npm/@supabase/supabase-js@2"></script>');
  }
} catch (error) {
  console.error('‚ùå Failed to initialize Supabase client:', error);
}

// ========================================
// QUICK SETUP GUIDE
// ========================================

/**
 * üöÄ ‡∏Ñ‡∏π‡πà‡∏°‡∏∑‡∏≠ Setup ‡∏≠‡∏¢‡πà‡∏≤‡∏á‡∏£‡∏ß‡∏î‡πÄ‡∏£‡πá‡∏ß
 * 
 * ‡∏Ç‡∏±‡πâ‡∏ô‡∏ï‡∏≠‡∏ô‡∏ó‡∏µ‡πà 1: ‡∏™‡∏£‡πâ‡∏≤‡∏á Supabase Project
 * 1. ‡πÑ‡∏õ‡∏ó‡∏µ‡πà https://supabase.com ‡πÅ‡∏•‡∏∞ Sign up/Login
 * 2. ‡∏Å‡∏î "New project"
 * 3. ‡πÄ‡∏•‡∏∑‡∏≠‡∏Å Organization ‡πÅ‡∏•‡∏∞‡∏ï‡∏±‡πâ‡∏á‡∏ä‡∏∑‡πà‡∏≠ Project
 * 4. ‡πÄ‡∏•‡∏∑‡∏≠‡∏Å Region (‡πÅ‡∏ô‡∏∞‡∏ô‡∏≥ Southeast Asia)
 * 5. ‡∏ï‡∏±‡πâ‡∏á Database Password (‡∏à‡∏≥‡πÑ‡∏ß‡πâ‡πÉ‡∏´‡πâ‡∏î‡∏µ)
 * 6. ‡∏Å‡∏î "Create new project" ‡πÅ‡∏•‡∏∞‡∏£‡∏≠ 2-3 ‡∏ô‡∏≤‡∏ó‡∏µ
 * 
 * ‡∏Ç‡∏±‡πâ‡∏ô‡∏ï‡∏≠‡∏ô‡∏ó‡∏µ‡πà 2: ‡∏£‡∏±‡∏ô Database Schema
 * 1. ‡πÑ‡∏õ‡∏ó‡∏µ‡πà Dashboard > SQL Editor
 * 2. ‡∏Ñ‡∏±‡∏î‡∏•‡∏≠‡∏Å SQL ‡∏à‡∏≤‡∏Å‡πÑ‡∏ü‡∏•‡πå supabase_setup_sql
 * 3. Paste ‡πÅ‡∏•‡∏∞‡∏Å‡∏î "Run"
 * 4. ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤‡πÑ‡∏°‡πà‡∏°‡∏µ Error
 * 
 * ‡∏Ç‡∏±‡πâ‡∏ô‡∏ï‡∏≠‡∏ô‡∏ó‡∏µ‡πà 3: ‡∏î‡∏∂‡∏á API Keys
 * 1. ‡πÑ‡∏õ‡∏ó‡∏µ‡πà Settings > API
 * 2. ‡∏Ñ‡∏±‡∏î‡∏•‡∏≠‡∏Å Project URL
 * 3. ‡∏Ñ‡∏±‡∏î‡∏•‡∏≠‡∏Å anon public key
 * 
 * ‡∏Ç‡∏±‡πâ‡∏ô‡∏ï‡∏≠‡∏ô‡∏ó‡∏µ‡πà 4: ‡∏≠‡∏±‡∏û‡πÄ‡∏î‡∏ï‡πÑ‡∏ü‡∏•‡πå‡∏ô‡∏µ‡πâ
 * 1. ‡πÅ‡∏ó‡∏ô‡∏ó‡∏µ‡πà SUPABASE_CONFIG.url ‡∏î‡πâ‡∏ß‡∏¢ Project URL
 * 2. ‡πÅ‡∏ó‡∏ô‡∏ó‡∏µ‡πà SUPABASE_CONFIG.anonKey ‡∏î‡πâ‡∏ß‡∏¢ anon key
 * 3. Save ‡πÅ‡∏•‡∏∞ refresh ‡∏´‡∏ô‡πâ‡∏≤‡πÄ‡∏ß‡πá‡∏ö
 * 
 * ‡∏Ç‡∏±‡πâ‡∏ô‡∏ï‡∏≠‡∏ô‡∏ó‡∏µ‡πà 5: ‡∏ó‡∏î‡∏™‡∏≠‡∏ö
 * 1. ‡πÄ‡∏õ‡∏¥‡∏î Browser Console (F12)
 * 2. ‡∏û‡∏¥‡∏°‡∏û‡πå: testSupabaseConnection()
 * 3. ‡∏Ñ‡∏ß‡∏£‡πÄ‡∏´‡πá‡∏ô‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏° "‚úÖ Supabase connection successful"
 */

// ========================================
// HELPER FUNCTIONS
// ========================================

/**
 * ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏Å‡∏≤‡∏£‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠‡∏Å‡∏±‡∏ö Supabase
 */
export async function testSupabaseConnection() {
  try {
    console.log('üîç Testing Supabase connection...');
    
    // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö client
    if (!supabase) {
      throw new Error('Supabase client not initialized');
    }
    
    // ‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡∏Å‡∏≤‡∏£‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠ Database
    const { data, error } = await supabase
      .from('banks')
      .select('count')
      .limit(1);
    
    if (error) {
      throw new Error(`Database error: ${error.message}`);
    }
    
    console.log('‚úÖ Supabase connection successful');
    console.log('üè¶ Database accessible');
    
    return true;
    
  } catch (error) {
    console.error('‚ùå Supabase connection failed:');
    console.error('Error:', error.message);
    console.error('');
    console.error('üõ†Ô∏è Troubleshooting:');
    console.error('1. Check if URL and API key are correct');
    console.error('2. Make sure database schema is created');
    console.error('3. Verify RLS policies are set up');
    console.error('4. Check browser network tab for errors');
    
    return false;
  }
}

/**
 * ‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡∏õ‡∏±‡∏à‡∏à‡∏∏‡∏ö‡∏±‡∏ô
 */
export async function getCurrentUser() {
  try {
    if (!supabase) return null;
    
    const { data: { user }, error } = await supabase.auth.getUser();
    if (error) throw error;
    
    return user;
  } catch (error) {
    console.error('Error getting current user:', error);
    return null;
  }
}

/**
 * ‡∏î‡∏∂‡∏á session ID ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö guest users
 */
export function getSessionId() {
  let sessionId = localStorage.getItem('loan_session_id');
  if (!sessionId) {
    sessionId = 'guest_' + Date.now() + '_' + Math.random().toString(36).substr(2, 9);
    localStorage.setItem('loan_session_id', sessionId);
  }
  return sessionId;
}

/**
 * ‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£ error responses
 */
export function handleSupabaseError(error) {
  console.error('Supabase error:', error);
  
  // Error messages mapping
  const errorMessages = {
    'Invalid API key': '‡∏Å‡∏≤‡∏£‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤ API key ‡πÑ‡∏°‡πà‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á - ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö anon key',
    'Row level security': '‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏™‡∏¥‡∏ó‡∏ò‡∏¥‡πå‡πÄ‡∏Ç‡πâ‡∏≤‡∏ñ‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• - ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö RLS policies',
    'duplicate key': '‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ã‡πâ‡∏≥ - ‡∏°‡∏µ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ô‡∏µ‡πâ‡∏≠‡∏¢‡∏π‡πà‡πÅ‡∏•‡πâ‡∏ß',
    'foreign key': '‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏≠‡πâ‡∏≤‡∏á‡∏≠‡∏¥‡∏á‡πÑ‡∏°‡πà‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á - ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏Ñ‡∏ß‡∏≤‡∏°‡∏™‡∏±‡∏°‡∏û‡∏±‡∏ô‡∏ò‡πå‡∏Ç‡∏≠‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•',
    'not found': '‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• - ‡∏ï‡∏≤‡∏£‡∏≤‡∏á‡∏´‡∏£‡∏∑‡∏≠‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏≠‡∏¢‡∏π‡πà',
    'Network error': '‡∏õ‡∏±‡∏ç‡∏´‡∏≤‡∏Å‡∏≤‡∏£‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠‡πÄ‡∏Ñ‡∏£‡∏∑‡∏≠‡∏Ç‡πà‡∏≤‡∏¢ - ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏≠‡∏¥‡∏ô‡πÄ‡∏ó‡∏≠‡∏£‡πå‡πÄ‡∏ô‡πá‡∏ï',
    'connection': '‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠ Supabase ‡πÑ‡∏î‡πâ - ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö URL',
    'JWT': '‡∏õ‡∏±‡∏ç‡∏´‡∏≤‡∏Å‡∏≤‡∏£‡∏¢‡∏∑‡∏ô‡∏¢‡∏±‡∏ô‡∏ï‡∏±‡∏ß‡∏ï‡∏ô - ‡∏•‡∏≠‡∏á‡πÄ‡∏Ç‡πâ‡∏≤‡∏™‡∏π‡πà‡∏£‡∏∞‡∏ö‡∏ö‡πÉ‡∏´‡∏°‡πà'
  };
  
  // ‡∏´‡∏≤‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏° error ‡∏ó‡∏µ‡πà‡πÄ‡∏´‡∏°‡∏≤‡∏∞‡∏™‡∏°
  for (const [key, message] of Object.entries(errorMessages)) {
    if (error.message?.toLowerCase().includes(key.toLowerCase())) {
      return message;
    }
  }
  
  // Default error message
  return error.message || '‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÑ‡∏°‡πà‡∏ó‡∏£‡∏≤‡∏ö‡∏™‡∏≤‡πÄ‡∏´‡∏ï‡∏∏';
}

/**
 * Retry mechanism ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö requests ‡∏ó‡∏µ‡πà‡∏•‡πâ‡∏°‡πÄ‡∏´‡∏•‡∏ß
 */
export async function retrySupabaseRequest(requestFn, maxRetries = 3, delay = 1000) {
  let lastError;
  
  for (let i = 0; i < maxRetries; i++) {
    try {
      return await requestFn();
    } catch (error) {
      lastError = error;
      console.warn(`üîÑ Request attempt ${i + 1}/${maxRetries} failed:`, error.message);
      
      if (i < maxRetries - 1) {
        console.log(`‚è≥ Retrying in ${delay * (i + 1)}ms...`);
        await new Promise(resolve => setTimeout(resolve, delay * (i + 1)));
      }
    }
  }
  
  throw lastError;
}

/**
 * ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡∏Å‡∏≤‡∏£‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠
 */
export function setupConnectionMonitor() {
  if (typeof window === 'undefined') return;
  
  // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏Å‡∏≤‡∏£‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠‡∏≠‡∏¥‡∏ô‡πÄ‡∏ó‡∏≠‡∏£‡πå‡πÄ‡∏ô‡πá‡∏ï
  window.addEventListener('online', () => {
    console.log('üåê Internet connection restored');
    testSupabaseConnection();
  });
  
  window.addEventListener('offline', () => {
    console.warn('üì¥ Internet connection lost');
  });
  
  // ‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡∏Å‡∏≤‡∏£‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠ Supabase ‡∏ó‡∏∏‡∏Å 5 ‡∏ô‡∏≤‡∏ó‡∏µ
  setInterval(async () => {
    if (navigator.onLine) {
      const connected = await testSupabaseConnection();
      if (!connected) {
        console.warn('üîÑ Supabase connection lost, check your configuration');
      }
    }
  }, 5 * 60 * 1000);
}

// ========================================
// CONFIGURATION VALIDATION
// ========================================

/**
 * ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏Å‡∏≤‡∏£‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤
 */
function validateConfiguration() {
  const issues = [];
  
  // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö URL
  if (SUPABASE_CONFIG.url === 'https://your-project-id.supabase.co') {
    issues.push('‚ùå Project URL ‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡πÑ‡∏î‡πâ‡∏≠‡∏±‡∏û‡πÄ‡∏î‡∏ï - ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡πÉ‡∏™‡πà URL ‡∏à‡∏£‡∏¥‡∏á‡∏à‡∏≤‡∏Å Supabase Dashboard');
  }
  
  // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö API Key
  if (SUPABASE_CONFIG.anonKey.startsWith('eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9...')) {
    issues.push('‚ùå API Key ‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡πÑ‡∏î‡πâ‡∏≠‡∏±‡∏û‡πÄ‡∏î‡∏ï - ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡πÉ‡∏™‡πà anon key ‡∏à‡∏£‡∏¥‡∏á‡∏à‡∏≤‡∏Å Supabase Dashboard');
  }
  
  // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö URL format
  if (!SUPABASE_CONFIG.url.includes('.supabase.co')) {
    issues.push('‚ö†Ô∏è URL format ‡∏≠‡∏≤‡∏à‡πÑ‡∏°‡πà‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á - ‡∏ï‡πâ‡∏≠‡∏á‡πÄ‡∏õ‡πá‡∏ô https://xxx.supabase.co');
  }
  
  // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö API Key format
  if (!SUPABASE_CONFIG.anonKey.startsWith('eyJ')) {
    issues.push('‚ö†Ô∏è API Key format ‡∏≠‡∏≤‡∏à‡πÑ‡∏°‡πà‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á - ‡∏ï‡πâ‡∏≠‡∏á‡∏Ç‡∏∂‡πâ‡∏ô‡∏ï‡πâ‡∏ô‡∏î‡πâ‡∏ß‡∏¢ eyJ');
  }
  
  if (issues.length > 0) {
    console.warn('üîß Configuration Issues Found:');
    issues.forEach(issue => console.warn(issue));
    console.warn('');
    console.warn('üìö Setup Guide: https://supabase.com/docs/guides/getting-started');
    return false;
  }
  
  return true;
}

// ========================================
// EXPORT SUPABASE CLIENT
// ========================================

export default supabase;

// ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö backward compatibility
export { supabase };

// ========================================
// INITIALIZATION
// ========================================

// ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏Å‡∏≤‡∏£‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤‡πÅ‡∏•‡∏∞‡πÄ‡∏£‡∏¥‡πà‡∏° connection monitor ‡πÄ‡∏°‡∏∑‡πà‡∏≠‡πÇ‡∏´‡∏•‡∏î‡πÄ‡∏™‡∏£‡πá‡∏à
if (typeof window !== 'undefined') {
  if (document.readyState === 'loading') {
    document.addEventListener('DOMContentLoaded', () => {
      const configValid = validateConfiguration();
      if (configValid) {
        setupConnectionMonitor();
        testSupabaseConnection();
      }
    });
  } else {
    const configValid = validateConfiguration();
    if (configValid) {
      setupConnectionMonitor();
      testSupabaseConnection();
    }
  }
}

// ========================================
// DEVELOPMENT HELPERS
// ========================================

// ‡πÄ‡∏â‡∏û‡∏≤‡∏∞‡πÉ‡∏ô development mode
if (typeof window !== 'undefined' && (
  window.location.hostname === 'localhost' || 
  window.location.hostname === '127.0.0.1' ||
  window.location.hostname.includes('local')
)) {
  // Export supabase client ‡πÑ‡∏õ‡∏¢‡∏±‡∏á window object ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö debugging
  window.supabaseClient = supabase;
  
  // Helper functions ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö console testing
  window.testSupabaseConnection = testSupabaseConnection;
  
  window.testSupabaseQuery = async (table, query = {}) => {
    try {
      console.log(`üîç Testing query on ${table}:`, query);
      
      if (!supabase) {
        throw new Error('Supabase client not initialized');
      }
      
      const { data, error } = await supabase
        .from(table)
        .select('*')
        .limit(5);
        
      if (error) throw error;
      
      console.log('‚úÖ Query result:', data);
      console.log(`üìä Found ${data.length} records`);
      
      return data;
    } catch (error) {
      console.error('‚ùå Query failed:', error.message);
      return null;
    }
  };
  
  window.checkSupabaseStatus = async () => {
    console.log('üîç Checking Supabase status...');
    console.log('URL:', SUPABASE_CONFIG.url);
    console.log('API Key (first 20 chars):', SUPABASE_CONFIG.anonKey.substring(0, 20) + '...');
    
    try {
      const { data, error } = await supabase.auth.getSession();
      console.log('Auth session:', data.session ? 'Active' : 'None');
      
      const connected = await testSupabaseConnection();
      console.log('Database connection:', connected ? 'OK' : 'Failed');
      
      return { auth: !!data.session, database: connected };
    } catch (error) {
      console.error('Status check failed:', error);
      return { auth: false, database: false };
    }
  };
  
  // Quick setup commands
  window.quickSetupGuide = () => {
    console.log('%cüöÄ Supabase Quick Setup Guide', 'color: #00ff00; font-size: 16px; font-weight: bold;');
    console.log('');
    console.log('1Ô∏è‚É£ Create Project: https://supabase.com/dashboard');
    console.log('2Ô∏è‚É£ Get API Keys: Project Settings > API');
    console.log('3Ô∏è‚É£ Run SQL Schema: Copy from supabase_setup_sql artifact');
    console.log('4Ô∏è‚É£ Update Config: Edit js/supabase-client.js');
    console.log('5Ô∏è‚É£ Test Connection: testSupabaseConnection()');
    console.log('');
    console.log('%cCommands Available:', 'color: #ffff00; font-weight: bold;');
    console.log('‚Ä¢ testSupabaseConnection() - Test database connection');
    console.log('‚Ä¢ testSupabaseQuery("table_name") - Test table query');
    console.log('‚Ä¢ checkSupabaseStatus() - Check overall status');
    console.log('‚Ä¢ quickSetupGuide() - Show this guide');
  };
  
  console.log('üîß Development mode: Supabase helpers loaded');
  console.log('üí° Type quickSetupGuide() for setup instructions');
  console.log('üß™ Type checkSupabaseStatus() to verify setup');
}

// ========================================
// ERROR BOUNDARY
// ========================================

// Global error handler for Supabase-related errors
if (typeof window !== 'undefined') {
  window.addEventListener('error', (event) => {
    if (event.error?.message?.includes('supabase') || 
        event.error?.message?.includes('postgresql')) {
      console.error('üö® Supabase-related error detected:', event.error);
      console.error('üí° Try running checkSupabaseStatus() for diagnosis');
    }
  });
  
  // Handle unhandled promise rejections from Supabase
  window.addEventListener('unhandledrejection', (event) => {
    if (event.reason?.message?.includes('supabase') ||
        event.reason?.message?.includes('postgresql')) {
      console.error('üö® Unhandled Supabase promise rejection:', event.reason);
      console.error('üí° Check your database connection and API keys');
      
      // Prevent the error from appearing in console (optional)
      // event.preventDefault();
    }
  });
}

// ========================================
// ENVIRONMENT DETECTION
// ========================================

/**
 * ‡∏ï‡∏£‡∏ß‡∏à‡∏à‡∏±‡∏ö environment ‡πÅ‡∏•‡∏∞‡πÅ‡∏™‡∏î‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ó‡∏µ‡πà‡πÄ‡∏´‡∏°‡∏≤‡∏∞‡∏™‡∏°
 */
function detectEnvironment() {
  const hostname = window.location.hostname;
  let env = 'production';
  
  if (hostname === 'localhost' || hostname === '127.0.0.1') {
    env = 'development';
  } else if (hostname.includes('staging') || hostname.includes('test')) {
    env = 'staging';
  }
  
  console.log(`üåç Environment: ${env}`);
  
  // ‡πÅ‡∏™‡∏î‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÄ‡∏û‡∏¥‡πà‡∏°‡πÄ‡∏ï‡∏¥‡∏°‡πÉ‡∏ô development
  if (env === 'development') {
    console.log('üîß Development features enabled');
    console.log('üìä Supabase URL:', SUPABASE_CONFIG.url);
  }
  
  return env;
}

// Run environment detection
if (typeof window !== 'undefined') {
  detectEnvironment();
}

// ========================================
// SUPABASE PROJECT TEMPLATES
// ========================================

/**
 * Template ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏™‡∏£‡πâ‡∏≤‡∏á Supabase project ‡πÉ‡∏´‡∏°‡πà
 */
export const SUPABASE_PROJECT_TEMPLATE = {
  // SQL Commands ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö quick setup
  createTablesSQL: `
    -- Run this in Supabase SQL Editor after creating your project
    -- Copy the full SQL from the supabase_setup_sql artifact
    
    -- Basic test to verify connection
    SELECT 'Supabase is working!' as message;
  `,
  
  // RLS Policies template
  rlsPoliciesSQL: `
    -- Enable RLS and create basic policies
    ALTER TABLE banks ENABLE ROW LEVEL SECURITY;
    CREATE POLICY "Public read access" ON banks FOR SELECT USING (true);
  `,
  
  // Sample data for testing
  sampleDataSQL: `
    -- Insert sample data for testing
    INSERT INTO banks (name, short_name) VALUES 
    ('‡∏ò‡∏ô‡∏≤‡∏Ñ‡∏≤‡∏£‡∏ó‡∏î‡∏™‡∏≠‡∏ö', 'TEST') 
    ON CONFLICT (short_name) DO NOTHING;
  `
};

// ========================================
// FINAL VALIDATION
// ========================================

// ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏Ñ‡∏£‡∏±‡πâ‡∏á‡∏™‡∏∏‡∏î‡∏ó‡πâ‡∏≤‡∏¢‡∏ß‡πà‡∏≤‡∏ó‡∏∏‡∏Å‡∏≠‡∏¢‡πà‡∏≤‡∏á‡∏û‡∏£‡πâ‡∏≠‡∏°‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô
if (typeof window !== 'undefined' && supabase) {
  // ‡∏ó‡∏î‡∏™‡∏≠‡∏ö basic functionality
  setTimeout(async () => {
    try {
      const { data } = await supabase.auth.getSession();
      console.log('üîê Auth system:', data.session ? 'Active session' : 'No session (OK)');
    } catch (error) {
      console.warn('‚ö†Ô∏è Auth system check failed:', error.message);
    }
  }, 1000);
}