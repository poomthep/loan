-- ลบตารางเก่าออกก่อน
drop table if exists promotions cascade;
drop table if exists banks cascade;
drop table if exists profiles cascade;

-- ตารางธนาคาร
create table banks (
  id bigint generated by default as identity primary key,
  name text not null,
  mrr numeric not null default 6.5
);

-- ตารางโปรโมชั่น
create table promotions (
  id bigint generated by default as identity primary key,
  bank_id bigint references banks(id),
  promo_name text not null,
  rate_year1 numeric,
  rate_year2 numeric,
  rate_year3 numeric,
  final_rate_formula text,
  conditions text,
  created_at timestamp default now()
);

-- ตาราง profiles (ผู้กู้)
create table profiles (
  id bigint generated by default as identity primary key,
  name text,
  age int,
  salary numeric,
  bonus numeric,
  other_income numeric,
  debt numeric,
  created_at timestamp default now()
);

-- ตัวอย่างข้อมูลธนาคาร
insert into banks (name, mrr) values
('ธนาคาร A', 6.5),
('ธนาคาร B', 6.3),
('ธนาคาร C', 6.7);

-- ตัวอย่างโปรโมชั่น
insert into promotions (bank_id, promo_name, rate_year1, rate_year2, rate_year3, final_rate_formula, conditions)
values
(1, 'โปร A1', 3.25, 4.00, 5.50, '-MRR 2%', 'รายได้ขั้นต่ำ 15000'),
(2, 'โปร B1', 2.99, 3.50, 5.00, '-MRR 1.75%', 'รายได้ขั้นต่ำ 20000'),
(3, 'โปร C1', 3.50, 4.20, null, '-MRR 2.25%', 'รายได้ขั้นต่ำ 18000');

-- Stored Procedure: คำนวณวงเงินกู้สูงสุด
create or replace function calculate_loan_capacity(
  income_salary numeric,
  income_bonus numeric,
  income_other numeric,
  debt numeric,
  dsr_ratio numeric,
  annual_rate numeric,
  years int
) returns table(loan_capacity numeric) as $$
declare
  net_income numeric;
  max_payment numeric;
  loan_capacity numeric;
  monthly_rate numeric;
  months int;
begin
  net_income := income_salary + (income_bonus/12) + income_other - debt;
  max_payment := net_income * dsr_ratio;
  monthly_rate := annual_rate / 12 / 100;
  months := years * 12;
  loan_capacity := (max_payment * (power(1+monthly_rate, months)-1)) / (monthly_rate * power(1+monthly_rate, months));
  return query select loan_capacity;
end;
$$ language plpgsql;

-- Stored Procedure: คำนวณค่างวดรายเดือน
create or replace function calculate_installment(
  loan_amount numeric,
  annual_rate numeric,
  years int
) returns numeric as $$
declare
  monthly_rate numeric;
  months int;
  installment numeric;
begin
  monthly_rate := annual_rate / 12 / 100;
  months := years * 12;
  installment := loan_amount * monthly_rate / (1 - power(1+monthly_rate, -months));
  return installment;
end;
$$ language plpgsql;
